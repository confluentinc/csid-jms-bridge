syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.confluent.amq.persistence.domain.proto";
option java_outer_classname = "JournalRecordProto";
option objc_class_prefix = "KJR";

package kafkajournal;


/*
  This corresponds to values found in
  org.apache.activemq.artemis.core.persistence.impl.journal.JournalRecordIds.

  I'd say these represents command IDs that are part of a protocol.

*/

enum JournalRecordType {
  UNKNOWN_JOURNAL_RECORD_TYPE = 0;
  ADD_RECORD = 11;

  ANNOTATE_RECORD = 12;

  ADD_RECORD_TX = 13;

  /* Annotation */
  ANNOTATE_RECORD_TX = 14;

  DELETE_RECORD_TX = 15;
  DELETE_RECORD = 16;
  PREPARE_TX = 17;
  COMMIT_TX = 18;
  ROLLBACK_TX = 19;
}

message JournalRecord {
  /*
    The ID of the record which is generated by the JMS Engine. For some transactional records
    this can be ZERO indicating it's a pure transactional protocol record
    (rollback, commit, prepare) and does not impact any messages directly.
  */
  int64 messageId = 1;

  /*
    If this is part of a transaction then this will be greater than ZERO.
  */
  int64 txId = 2;

  /*
    This is the extended ID which can be used to uniquely identify records that belong to a group,
    such as a transaction or record annotations, are only ID'd by the group's ID.
  */
  int32 extendedId = 3;

  /*
    This is used by the JMS Engine to represent what part of their protocol this record belongs to.
  */
  int32 protocolRecordType = 4;

  /*
    Low level journal type indicating if this is part of a transaction, record lifecycle or
    an annotation.
  */
  JournalRecordType recordType = 5;

  /*
    XA transactions are Prepared (PREPARE) and use this to carry data to support them.
    Otherwise it is the main payload of the messsage with some not containing any (DELETE).
   */
  bytes data = 6;

}

/*
  Represents a collection of all record keys that belong to a transaction.
*/
message TransactionReference {
  int64 txId = 1;
  repeated JournalEntryKey entryReferences = 2;
}

/*
  Represents a collection of all record keys that annotate a specific message
*/
message AnnotationReference {
  int64 messageId = 1;
  repeated JournalEntryKey entryReferences = 2;
}

/*
  Annotations are additional information that are tied to a message. Usually the payloads
  are quite small, less than 1KB.
*/
message MessageAnnotation {
  int32 protocolRecordType = 1;
  bytes data = 2;
}

/*
  This key should be unique within the journal if it is not to be compacted away.

  All transactions records should have the txId populated with an ID 0 or greater.
  Transactions records that represents modifications to message state should also include
  the messageId. Transactional updates to the annotations of a message should also include the
  messageId and also an extendedId to give the update a unique key.

  For non-transactional records ADD and DELETE only the messageId is required. For updates to a
  message's annotations the messageId is required but also the extendedId to ensure uniqueness of
  the key.
*/
message JournalEntryKey {
  int64 messageId = 1;
  int64 txId = 2;
  int32 extendedId = 3;
}

/*
  Represents an entry in the journal, can be one of a newly appended journal record, a message or
  annotations related to a message.
*/
message JournalEntry {
  oneof entry {
    JournalRecord appendedRecord = 1;
    TransactionReference transactionReference = 2;
    AnnotationReference annotationReference = 3;
  }
}
