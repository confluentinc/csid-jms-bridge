/*
 * Copyright 2020 Confluent Inc.
 */

package io.confluent.amq.cli;

import com.github.rvesse.airline.annotations.Option;
import com.github.rvesse.airline.annotations.restrictions.Once;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import org.apache.kafka.clients.consumer.ConsumerConfig;

public class KafkaClientOptions {

  private static final Random RAND = new Random();

  @Option(
      name = "--bootstrap",
      description = "The connection string to the bootstrap broker. DEFAULT: localhost:9092")
  @Once
  protected String brokerUrl = "localhost:9092";

  @Option(
      name = "--client-id",
      description = "Specify the client id to use for the connection. DEFAULT: <auto-generated>")
  @Once
  protected String clientId;

  @Option(
      name = "--group-id",
      description = "Specify the group id to use for consuming records,"
          + " if applicable. DEFAULT: <auto-generated>")
  @Once
  protected String groupId;

  @Option(name = {"-p",
      "--property"},
      description = "Additional properties to be applied to the client.")
  protected List<KeyVal> clientProperties;

  public Map<String, Object> getKafkaOpts() {
    Map<String, Object> finalMap = new HashMap<>();
    if (clientProperties != null) {
      clientProperties.forEach(p -> finalMap.put(p.key, p.val));
    }
    finalMap.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerUrl);
    finalMap.put(ConsumerConfig.CLIENT_ID_CONFIG,
        useOrCreateId(clientId, "jmsbridgecli", true));
    finalMap.put(ConsumerConfig.GROUP_ID_CONFIG,
        useOrCreateId(groupId, "jmsbridgecli", true));

    return finalMap;
  }

  @SuppressFBWarnings("DE_MIGHT_IGNORE")
  protected String useOrCreateId(String useId, String prefix, boolean useHostname) {
    String finalId = useId;

    if (useId == null) {
      finalId = Long.toHexString(RAND.nextLong());

      if (useHostname) {
        try {
          InetAddress ip = InetAddress.getLocalHost();
          String hostname = ip.getHostName();
          finalId = hostname + "-" + finalId;
        } catch (Exception e) {
          //don't use hostname I guess
        }
      }

      finalId = Objects.toString(prefix, "id") + "-" + finalId;
    }

    return finalId;
  }

  public static class KeyVal {

    String key;
    String val;

    public KeyVal(String keyValStr) {
      String[] parts = keyValStr.split("=");
      key = parts[0];
      val = parts[1];
    }
  }
}

