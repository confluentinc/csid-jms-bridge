bridge {
  id = quick-start-kafka-request-reply

  kafka {
    // applys to the producer and consumers, standard kafka client config
    // can setup TLS here
    bootstrap.servers = "localhost:9092"
  }

////////////
//
//  JOURNAL CONFIGURATION
//
//  All journal configuration is optional with the exception that for environments with less than
//  3 Kafka brokers in the cluster the replication will need to be adjusted to the number of
//  available Kafka brokers, e.g. 1 or 2.
//
////////////

  journals {

    // This topic configuration applies to all journals
    topic {

      // for environments without 3 or more brokers set this to the number of brokers available
      replication = 1
    }
  }

////////////
//
//  JOURNAL CONFIGURATION
//
//  All journal configuration is optional with the exception that for environments with less than
//  3 Kafka brokers in the cluster the replication will need to be adjusted to the number of
//  available Kafka brokers, e.g. 1 or 2.
//
////////////

 // Enables routing of topic messages between Kafka and JMS Bridge
  routing = {

    // Add a topic match which controls what topics will by synced and allows specifying
    // some configuration around naming, kafka key extraction and JMS message type conversion.
    topics += {

       // REQUIRED, must be set, can be any regular expression
       match = "quick-start-request"

        // What JMS message type should the message coming from kafka for this topic match be
        // treated as?
        message.type = "TEXT"
    }

    // Add a topic match for responses. This topic will most likely not be bound by any JMS queue
    // therefore it requires the 'consume.always' option to be set to force message to always be
    // synced from Kafka
    topics += {

       // REQUIRED, must be set, can be any regular expression
       match = "quick-start-response"

        message.type = "TEXT"

        // force the JMS Bridge to always consume this topic regardless of whether it is being
        // routed from. Producers will be setting the `jms.JMSDestination` header in response messages
        // with the value extracted from the `jms.JMSReplyTo` header coming from the request message.
        // This will route the incoming message to the correct temporary queue.
        consume.always = true
    }
  }
}